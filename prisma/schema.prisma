datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ScheduleStatus {
  READY
  PENDING
  CANCELED
  FINISHED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CUSTOMER)
  company   Company?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wallets   Wallet[]
}

model Company {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String            @unique
  phone            String            @unique
  slogan           String
  manager          User              @relation(fields: [managerId], references: [id])
  managerId        String            @unique @db.ObjectId
  address          Address?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  wallet           Wallet[]
  walletSettings   WalletSettings?
  scheduleSettings ScheduleSettings?
  agenda           Agenda?
  schedule         Schedule[]
}

model Wallet {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  points     Int       @default(0)
  history    History[]
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String    @db.ObjectId
  customer   User      @relation(fields: [customerId], references: [id])
  customerId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([companyId, customerId])
}

model Agenda {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String            @unique @db.ObjectId
  businessHours   BusinessHours
  unavailableDays UnavailableDays[]
  range           Int?              @default(120)
  buffer          Buffer?
  schedule        Schedule[]
}

model Schedule {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  company        Company         @relation(fields: [companyId], references: [id])
  companyId      String          @db.ObjectId
  agenda         Agenda          @relation(fields: [agendaId], references: [id])
  agendaId       String          @db.ObjectId
  status         ScheduleStatus  @default(PENDING)
  contact        ScheduleContact
  startDate      DateTime
  endDate        DateTime
  adultsAmmount  Int             @default(0)
  kidsAmmount    Int             @default(0)
  additionalInfo String?
}

type ScheduleContact {
  name  String
  phone String
}

type UnavailableDays {
  startDate DateTime
  endDate   DateTime
  reason    String
}

type BusinessHours {
  monday    BusinessHour[]
  tuesday   BusinessHour[]
  wednesday BusinessHour[]
  thursday  BusinessHour[]
  friday    BusinessHour[]
  saturday  BusinessHour[]
  sunday    BusinessHour[]
}

type BusinessHour {
  isActive  Boolean
  startTime String
  endTime   String
}

type Buffer {
  after  Int @default(0)
  before Int @default(0)
}

type History {
  pointsAdded Int      @default(0)
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
}

type Address {
  street String
  number String
  city   String
  state  String
  zip    String
}

type WalletSettings {
  size Int
}

type ScheduleSettings {
  maxCapacity Int
}
