datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ScheduleStatus {
  READY
  PENDING
  CANCELED
  FINISHED
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  password  String
  name      String
  role      UserRole   @default(CUSTOMER)
  company   Company?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  wallets   Wallet[]
  movements Movement[]
}

model Company {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String            @unique
  phone            String            @unique
  slogan           String
  manager          User              @relation(fields: [managerId], references: [id])
  managerId        String            @unique @db.ObjectId
  address          Address?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  wallet           Wallet[]
  walletSettings   WalletSettings?
  scheduleSettings ScheduleSettings?
  agenda           Agenda?
  schedule         Schedule[]
  chamber          Chamber[]
  inventoryItem    InventoryItem[]
  movement         Movement[]
  catalogGroup     CatalogGroup[]
}

model Wallet {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  points     Int       @default(0)
  history    History[]
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String    @db.ObjectId
  customer   User      @relation(fields: [customerId], references: [id])
  customerId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([companyId, customerId])
}

model Agenda {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String            @unique @db.ObjectId
  availableHours   AvailableHours
  unavailableDays  UnavailableDays[]
  schedule         Schedule[]
  buffer           Buffer? // time before or after
  duration         Int?              @default(60) // duration of schedules
  spotStep         Int?              @default(60) // frequency of available time slots
  minimumNotice    Int?              @default(0) // minimum amount of notice
  schedulingWindow Int?              @default(60)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

type Buffer {
  after  Int @default(0)
  before Int @default(0)
}

type UnavailableDays {
  startDate String
  endDate   String
  reason    String
}

type AvailableHours {
  monday    AvailableHour[]
  tuesday   AvailableHour[]
  wednesday AvailableHour[]
  thursday  AvailableHour[]
  friday    AvailableHour[]
  saturday  AvailableHour[]
  sunday    AvailableHour[]
}

type AvailableHour {
  isActive  Boolean
  startTime String
  endTime   String
}

model Schedule {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  company        Company         @relation(fields: [companyId], references: [id])
  companyId      String          @db.ObjectId
  agenda         Agenda          @relation(fields: [agendaId], references: [id])
  agendaId       String          @db.ObjectId
  status         ScheduleStatus  @default(PENDING)
  contact        ScheduleContact
  startDate      DateTime
  endDate        DateTime
  adultsAmmount  Int             @default(0)
  kidsAmmount    Int             @default(0)
  additionalInfo String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

type ScheduleContact {
  name        String
  firstPhone  String
  secondPhone String
}

type History {
  pointsAdded Int      @default(0)
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
}

type Address {
  street String
  number String
  city   String
  state  String
  zip    String
}

type WalletSettings {
  size Int
}

type ScheduleSettings {
  maxCapacity                  Int
  minimumQuantityForScheduling Int
}

model InventoryItem {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  company           Company           @relation(fields: [companyId], references: [id])
  companyId         String            @db.ObjectId
  description       String
  gtin              String
  currentInventory  Float
  minInventory      Float
  unitOfMeasurement UnitOfMeasurement
  cost              Float
  chamber           Chamber           @relation(fields: [chamberId], references: [id])
  chamberId         String            @db.ObjectId
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  movement          Movement?
}

enum UnitOfMeasurement {
  UNIT
  GRAM
  MILLIGRAM
  KILOGRAM
  MILLILITER
  LITER
}

model Chamber {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     String          @db.ObjectId
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  inventoryItem InventoryItem[]
}

model Movement {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  type            MovementType
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique @db.ObjectId
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String        @unique @db.ObjectId
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        @db.ObjectId
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum MovementType {
  ENTRY
  EGRESS
}

model CatalogGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String   @db.ObjectId
  order     Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
